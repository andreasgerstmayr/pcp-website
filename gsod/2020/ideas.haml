!!! html
%html
  %head
    = Haml::Engine.new(File.read("assets/haml-includes/head.haml")).render

  %body
    = Haml::Engine.new(File.read("assets/haml-includes/navigation.haml")).render

    %div{:class => 'site-content'}
      %div{:class => 'how-to is-typeset'}

        %div{:class => 'row-parent'}
          %div{:class => 'row'}
            %section{:class => 'row__colspaced'}

              %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--img'}
                  %a{:name => 'pcp'}
                  %h3 Welcome!
                  %p
                    Thanks for your interest in working on Performance Co-Pilot (PCP)
                    in this years Google Season of Docs program.
                    PCP is a system-level performance analysis toolkit for complex,
                    distributed computer systems.
                  %p
                    The tools in PCP are fairly well documented, but there is plenty
                    of room for improvement!
                    Below are a list of project ideas and areas we'd like to see the
                    existing documentation improved, and new documentation added.
                  %p
                    If you find below projects of interest, please contact the group
                    of mentors at
                    %a{:href => 'mailto:pcp-mentors@groups.io'} pcp-mentors@groups.io
                    and CC individual mentors listed with your area(s) of interest.
                  %p
                    Please provide at that time:
                  %ol
                    %li
                      a brief introduction to yourself, a little about your background
                      and any experience you have in technical writing
                    %li
                      the PCP project area(s) you are interested in working on
                  %p
                    We'll then chat with you directly about the idea(s) and work with
                    you on a project proposal.
                    A strong proposal will likely include more than one idea from the
                    list that follows, and a strong candidate would be one with an
                    interest in learning about performance analysis, monitoring tools,
                    and improving documentation!

                  %h3 Resources
                  %p
                    To learn about PCP basics, philosophy and tools, we recommend you:
                  %ol
                    %li
                      Install PCP on your computer by refering to the
                      %a{:href => 'https://pcp.io/docs/guide.html'} Quick Reference Guide
                      to help you get started.
                    %li
                      Peruse the introductory chapters of the
                      %a{:href => 'https://pcp.readthedocs.io'} PCP Guides
                  %br

              %div{:class => 'colspan12-8 colspan8-5 colspan6-4 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--img'}
                  %br
                  %h3 Ideas List
                  %ol
                    %li
                      New Content Areas
                      %ul
                        %li
                          %a{:href => '#grafana-pcp'} PCP Grafana documentation
                        %li
                          %a{:href => '#howtos'} Provide How-To style launching points
                        %li
                          %a{:href => '#pbench'} Benchmarking with PCP and pbench
                    %li
                      Book Project Areas
                      %ul
                        %li
                          %a{:href => '#readthedocs-pcp'} Convert PCP docbook content to readthedocs and reStructuredText format
                        %li
                          %a{:href => '#readthedocs-restapi'} Convert REST API documentation from man page to developer friendly format
                        %li
                          %a{:href => '#readthedocs-pbench'} Convert pbench guides to readthedocs hosting
                  %br

              %div{:class => 'colspan12-4 colspan8-3 colspan6-2 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--cta'}
                  %h2 Google
                  %h2 Season of Docs
                  %h2 2020
                  %br
                    (
                    %a{:href => 'https://developers.google.com/season-of-docs/'} Home
                    )
                  %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'grafana-pcp'}
            %h3 PCP Grafana documentation
            %p
              %a{:href => 'https://grafana-pcp.readthedocs.io/'} grafana-pcp
              is a plugin for Grafana, which allows the visualization
              of Performance Co-Pilot metrics in the Grafana metric visualization application.
              There are three data sources available at the moment:
            %ol
              %li
                scalable, multi-host performance metrics stored
                in the
                %a{:href => 'https://redis.io'} Redis
                distributed data store
              %li
                live, on-host metrics provided by the Vector data source
                (supercedes the original standalone Vector web application,
                which is now deprecated)
              %li
                on-demand kernel metrics provided by
                %a{:href => 'https://github.com/iovisor/bpftrace'} bpftrace scripts
            %p
              All three data sources access PCP metric data via
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmproxy.1.html'} pmproxy
              REST APIs, which in turn requests the metric values from the scalable
              %a{:href => 'https://redis.io/'} Redis
              database,
              %a{:href => 'https://man7.org/linux/man/man3/pmapi.3.html'} pmapi
              or the
              %a{:href => 'https://man7.org/linux/man/man1/pmdabpftrace.1.html'} bpftrace PMDA.
              Grafana dashboards can be exported in JSON format and shipped with grafana-pcp or
              imported using the Grafana provisioning mechanisms.
            %p
              This is a significant opportunity for a technical writer to work with
              PCP developers to document the existing functionality, write guides,
              document REST APIs and the administrative procedures required to setup local and
              cloud-based time series analysis at scale.
            %p
              %strong Expected results:
              Initial documentation is available at
              %a{:href => 'https://grafana-pcp.readthedocs.io/'} grafana-pcp.readthedocs.io,
              which will serve as a starting point.
              This documentation should be extended by describing the functionality of grafana-pcp
              in much greater detail, adding screenshots, infographics and various guides to setup
              core functionality.
              Additionally, the documentation should contain a section about the technical details -
              specifically the interaction of all involved components (pmcd, pmproxy, pmseries, redis, Grafana)
              with one or more diagrams.
            %p
              %strong Mentors:
              %a{:href => 'mailto:agerstmayr@redhat.com'} Andreas Gerstmayr &lt;agerstmayr@redhat.com&gt;
              ,
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott &lt;nathans@redhat.com&gt;
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'howtos'}
            %h3 Provide How-To style launching points
            %p
              One area of need in the PCP documentation identified at last years
              %a{:href => '/conference/2019/home.html'} conference
              was for us to provide short, hands-on introductory texts and videos
              that guide people toward the in-depth documentation they need.
              The deep documentation exists and is needed, but its buried in alot
              of the detail-oriented, jargon-heavy books.
            %p
              %strong Expected results:
              A series of short, introductory pieces will be created that provide
              simple introductions to complex topics.
              These topics include writing new instrumentation agents, application
              instrumentation in Java, Go, Rust, python and C languages, writing
              analysis tools, and some PCP administration tasks.
              These will each link to the detailed documentation elsewhere - such
              as in the 'Users and Administors Guide', or the 'Programmers Guide'.
            %p
              %strong Mentors:
              %a{:href => 'mailto:chorn@redhat.com'} Christian Horn &lt;chorn@redhat.com&gt;
              ,
              %a{:href => 'mailto:abhide@redhat.com'} Apurva Bhide &lt;abhide@redhat.com&gt;
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'pbench'}
            %h3 Benchmarking with PCP and pbench
            %p
              This project involves documenting recent advances in the performance
              analysis capabilities provided by PCP within the
              %a{:href => 'https://distributed-system-analysis.github.io/pbench/'} pbench
              benchmarking and analysis framework.
              This involves documenting the new pbench direction of using the PCP
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmlogger.1.html'} pmlogger
              tool's remote collection and efficient archive storage capabilities.
              Users should also be guided through the processes for adding new PCP
              metrics into the set collected during a pbench benchmarkng run.
              This could be in the form of tutorials, extensions to the existing
              online pbench documentation, other novel formats, or all of the above.
            %p
              %strong Expected results:
              This project provides a good opportunity to the technical writer to
              work hand-in-hand with PCP and pbench developers.
              The new content will need to link in, and form part of the existing pbench
              documentation, such that it guides the (expert level) users how to use the
              tools in an intuitive and informative way. 
            %p
              %strong Mentors:
              %a{:href => 'mailto:ashwinnayak111@gmail.com'} Ashwin Nayak &lt;ashwinnayak111@gmail.com&gt;
              ,
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott &lt;nathans@redhat.com&gt;
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'readthedocs-pcp'}
            %h3 Convert docbook content to readthedocs and reStructuredText format
            %p
              The Performance Co-Pilot documentation currently exists in several forms.
              These are the primary PCP
              %a{:href => 'https://pcp.io/'} website
              and the PCP books (docbook format).
              This project will focus on transfering and updating this
              %a{:href => 'https://en.wikipedia.org/wiki/DocBook'} docbook
              content to
              %a{:href => 'https://en.wikipedia.org/wiki/ReStructuredText'} RST
              such that it can be hosted on the modern, community
              %a{:href => 'https://readthedocs.io/'} readthedocs.io
              site.
              This will allow community contributors to more easily change and
              extend this content.
            %p
              %strong Expected results:
              You will work with the mentors to setup the Performance Co-Pilot
              %a{:href => 'https://readthedocs.io/'} readthedocs.io
              hosting, and by the end of the project we will be able to
              edit and contribute to the books directly through github.
            %p
              %strong Mentors:
              %a{:href => 'mailto:abhide@redhat.com'} Apurva Bhide &lt;abhide@redhat.com&gt;
              ,
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott &lt;nathans@redhat.com&gt;
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'readthedocs-restapi'}
            %h3 Convert REST API documentation from man page to developer friendly format
            %p
              The Performance Co-Pilot REST API is currently documented in
              %a{:href => 'https://man7.org/linux/man-pages/man3/pmwebapi.3.html'} man page
              format primarily.
              This is not ideal for web developers, so we'd like to transition
              to separate formatted web pages describing individual requests,
              allowed inputs, sample outputs, etc.
              Likely, this would also be in
              %a{:href => 'https://en.wikipedia.org/wiki/ReStructuredText'} RST
              form such that it can be hosted on the modern, community
              %a{:href => 'https://readthedocs.io/'} readthedocs.io
              site.
              This will allow community contributors to more easily change and
              extend this content.
            %p
              %strong Expected results:
              You will work with the mentors to create modern REST API documentation
              for the Performance Co-Pilot, readily consumable by web developers.
            %p
              %strong Mentors:
              %a{:href => 'mailto:agerstmayr@redhat.com'} Andreas Gerstmayr &lt;agerstmayr@redhat.com&gt;
              ,
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott &lt;nathans@redhat.com&gt;
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'readthedocs-pbench'}
            %h3 Convert pbench MarkDown content to readthedocs and reStructuredText format
            %p
              The pbench benchmarking suite makes use of Performance
              Co-Pilot services for recording arbitrary performance metrics
              during benchmark runs.
              It is currently documented in a traditional fashion similar
              to PCP itself, with much content in large individual files and
              typically in
              %a{:href => 'https://en.wikipedia.org/wiki/Markdown'} MarkDown
              format.
              This project will focus on transfering and updating the pbench
              %a{:href => 'https://github.com/distributed-system-analysis/pbench/tree/main/doc'} guides
              to
              %a{:href => 'https://en.wikipedia.org/wiki/ReStructuredText'} RST
              such that it can be hosted on the modern, community
              %a{:href => 'https://readthedocs.io/'} readthedocs.io
              site.
              This will allow community contributors to more easily change and
              extend this content.
            %p
              %strong Expected results:
              You will work with the mentors to setup the pbench
              %a{:href => 'https://readthedocs.io/'} readthedocs.io
              hosting, and by the end of the project we will be able to
              edit and contribute to the content directly through github.
            %p
              %strong Mentors:
              %a{:href => 'mailto:ashwinnayak111@gmail.com'} Ashwin Nayak &lt;ashwinnayak111@gmail.com&gt;
              ,
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott &lt;nathans@redhat.com&gt;
            %br

    = Haml::Engine.new(File.read("assets/haml-includes/footer.haml")).render
