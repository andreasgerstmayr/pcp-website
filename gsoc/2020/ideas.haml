!!! html
%html
  %head
    = Haml::Engine.new(File.read("assets/haml-includes/head.haml")).render

  %body
    = Haml::Engine.new(File.read("assets/haml-includes/navigation.haml")).render

    %div{:class => 'site-content'}
      %div{:class => 'how-to is-typeset'}

        %div{:class => 'row-parent'}
          %div{:class => 'row'}
            %section{:class => 'row__colspaced'}
              %div{:class => 'colspan12-8 colspan8-5 colspan6-4 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--img'}
                  %br
                  %h3 Ideas List
                  %ol
                    %li
                      Integration projects
                      %ul
                        %li
                          %a{:href => '#grafana'} Extending the Grafana integration
                        %li
                          %a{:href => '#pbench'} Improving the pbench integration
                    %li
                      Timeseries projects
                      %ul
                        %li
                          %a{:href => '#language'} Timeseries query language extensions
                        %li
                          %a{:href => '#scalable'} Scale-out timeseries injest and querying
                  %br

              %div{:class => 'colspan12-4 colspan8-3 colspan6-2 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--cta'}
                  %h2 Google
                  %h2 Summer of Code
                  %h2 2020
                  %br
                    (
                    %a{:href => 'https://summerofcode.withgoogle.com'} Home
                    )
                  %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'grafana'}
            %h3 Extending the Grafana integration
            %p
              This project involves advancing the performance analysis
              capabilities provided by the PCP
              %a{:href => 'https://grafana.com/'} Grafana
              integration in
              %a{:href => 'https://grafana-pcp.readthedocs.io/'} grafana-pcp.
            %p
              The student will work on:
              %ol
                %li
                  developing a 'reactive' dashboard with the
                  %a{:href => 'https://grafana.com/docs/grafana/latest/reference/scripting/'} scripted dashboards
                  feature of Grafana and using PCP metrics
                %li
                  implementing support for PCP 'derived metrics' in the Vector data source,
                  as described in the PCP
                  %a{:href => 'https://man7.org/linux/man-pages/man3/pmwebapi.3.html'} REST API
                  documentation
                %li
                  improving the 'metric search' process by creating a new page for live,
                  full-text search on PCP metric names, labels and descriptions
            %p
              Based on performance metrics from PCP and a predefined rule set,
              the 'reactive' dashboard should display only relevant metrics to
              the user.
              For example, if the CPU utilization is high, it should show an
              overview of CPU statistics and processes contributing load.
              The user should then be able to drill down into more specific
              areas of interest - e.g. present graphs about lock contention.
            %p
              For each recognized performance issue a link should be presented
              to the user on how to resolve the issue.
              In this way the dashboards guide users toward possible root cause
              of performance problems.
            %p
              As a starting point, an initial
              %a{:href => 'https://github.com/performancecopilot/pcp-webapp-grafana/blob/checklist/checklist.json'} checklist
              schema shows a tree structure, rules, help text and links to
              further information.
            %p
              %strong Expected results:
              The student will extend their TypeScript and React programming
              skills, will gain insight into the semantics of various forms of
              performance data available from systems and applications, and
              visualization techniques appropriate to their analysis.
              They will also learn a great detail about the inner workings of
              %a{:href => 'https://grafana.com/'} Grafana,
              a popular open-source visualization tool.
            %p
              %strong Prerequisite knowledge:
              TypeScript, JavaScript and React programming, operating systems.
            %p
              %strong Skill level:
              Intermediate
            %p
              %strong Primary mentor:
              %a{:href => 'mailto:agerstmayr@redhat.com'} Andreas Gerstmayr &lt;agerstmayr@redhat.com&gt;
              , secondary mentor:
              %a{:href => 'mailto:jkoch@netflix.com'} Jason Koch &lt;jkoch@netflix.com&gt;
            %p
              %strong Interested students so far:
              3
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'pbench'}
            %h3 Improving the pbench integration
            %p
              This project involves advancing the performance analysis
              capabilities provided by the PCP integration within the
              %a{:href => 'https://distributed-system-analysis.github.io/pbench/'} pbench
              benchmarking and analysis framework.
            %p
              The student will work on:
              %ol
                %li
                  Modifying pbench to leverage pmlogger's remote collection capabilities
                %li
                  Leveraging PCP's archive compression feature for efficient storage
                %li
                  Enhancing pbench with the ability to enable live display of
                  collected metrics via
                  %a{:href => 'https://grafana.com/'} Grafana
                %li
                  Modify PCP to provide new
                  %a{:href => 'https://man7.org/linux/man-pages/man1/pmcd.1.html'} pmcd
                  agent metrics,
                  %a{:href => 'https://man7.org/linux/man-pages/man1/pmlogger.1.html'} pmlogger
                  and
                  %a{:href => 'https://man7.org/linux/man-pages/man1/pmlogconf.1.html'} pmlogconf
                  templates tailored to recommended performance analysis
                  data collection for target workloads (database, web
                  server, computation, low-latency networking, etc.)
            %p
              %strong Expected results:
              The student will extend their Python and Bash programming
              skills, learn about extensible system benchmarking with
              %a{:href => 'https://distributed-system-analysis.github.io/pbench/'} pbench,
              learn how to export data to
              %a{:href => 'https://redis.io/'} Redis
              for the
              %a{:href => 'https://grafana-pcp.readthedocs.io/'} grafana-pcp
              data source, work with the PCP
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmlogger.1.html'} pmlogger
              tool to efficiently collect data, and discover the kinds of
              operating system and application metrics PCP is capable
              of collecting to match various workloads.
            %p
              %strong Prerequisite knowledge:
              Python and Bash programming, operating systems.
            %p
              %strong Skill level:
              Intermediate
            %p
              %strong Primary mentor:
              %a{:href => 'mailto:pportant@redhat.com'} Peter Portant &lt;pportant@redhat.com&gt;
              , secondary mentor:
              %a{:href => 'mailto:ndokos@redhat.com'} Nick Dokos &lt;ndokos@redhat.com&gt;
            %p
              %strong Interested students so far:
              4
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'language'}
            %h3 Timeseries query language extension
            %p
              Performance Co-Pilot timeseries are series of time-stamped values
              gathered centrally from hosts making performance data available.
              This data could be gathered for many metrics, at high frequency,
              and from many hosts.
              It is potentially high volume data, and searching it efficiently
              (querying) at speed is a non-trivial problem.
            %p
              The Performance Co-Pilot timeseries query language is designed to
              allow fast querying based on metric names and labels.
              A command line utility and a REST API are available from
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmseries.1.html'} pmseries
              and the
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmproxy.1.html'} pmproxy
              daemon.
            %p
              The following is a simple example query which extracts the five
              most recently sampled values for aggregate disk read throughput
              (disk.all.read metric) for two hosts:
              %pre
                disk.all.read { hostname: "app1.acme.com" || hostname: "app2.acme.com" } [count: 5]
            %p
              Internally, the PCP query language makes use of the
              %a{:href => 'https://redis.io/'} Redis
              distributed data store and its native
              %a{:href => 'https://redis.io/topics/streams-intro'} timeseries
              features.
              The
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmseries.1.html'} pmseries
              command line utility provides low-level access to the language.
            %p
              This project will extend the existing query language with:
              %ol
                %li
                  statistical functions (sum, mean, average, standard deviation,
                  histogram binning, top-N, N-th percentile)
                %li
                  rate conversion function for counter metrics
                %li
                  scale and unit conversion functions
                %li
                  mathematical functions (abs, floor, log, sqrt, round)
                %li
                  binary operators for numeric metrics (addition, subtraction,
                  division, multiplication, exponentiation)
            %p
              %strong Expected results:
              The student will extend their C language programming skills,
              learn about the
              %a{:href => 'https://en.wikipedia.org/wiki/Lex_(software)'} lex
              and
              %a{:href => 'https://en.wikipedia.org/wiki/Yacc'} yacc
              language parsing tools,
              performance analysis with PCP and the
              %a{:href => 'https://redis.io/'} Redis
              distributed data store.
            %p
              %strong Prerequisite knowledge:
              C programming.
            %p
              %strong Skill level:
              Intermediate-Advanced
            %p
              %strong Primary mentor:
              %a{:href => 'mailto:goodwinos@gmail.com'} Mark Goodwin &lt;goodwinos@gmail.com&gt;
              , secondary mentor:
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott &lt;nathans@redhat.com&gt;
            %p
              %strong Interested students so far:
              3
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'scalable'}
            %h3 Scaling timeseries injest and querying
            %p
              The Performance Co-Pilot approach to scalable, multi-host performance
              analysis builds on the
              %a{:href => 'https://redis.io/'} Redis
              distributed data store and its native timeseries support.
              The
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmseries.1.html'} pmseries
              utility and
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmproxy.1.html'} pmproxy
              daemon provide the tooling and APIs to support this.
              This project will improve scalability in these programs through:
              %ol
                %li
                  extending PCP instrumentation in
                  %a{:href => 'https://man7.org/linux/man-pages/man1/pmproxy.1.html'} pmproxy
                  to expose latency and throughput metrics to analysis tools
                %li
                  adding PCP functionality to make
                  %a{:href => 'https://man7.org/linux/man-pages/man1/pmseries.1.html'} pmseries
                  queries use Redis features for parallel query execution, with
                  the aim of scaling up PCP timeseries injest and querying to the
                  level of many-thousands-of-nodes.
                %li
                  implementing compression of responses in
                  %a{:href => 'https://man7.org/linux/man-pages/man1/pmproxy.1.html'} pmproxy
                  and evaluating impact on overall and individual response performance
                %li
                  implementing and evaluating other performance improvement ideas
                  based on profiling and analysis of the server under load
            %p
              %strong Expected results:
              The student will extend their C language programming skills,
              learn about the
              %a{:href => 'https://redis.io/'} Redis
              distributed data store (and
              %a{:href => 'https://redis.io/topics/cluster-spec'} Redis clustering
              in particular),
              gain deep familiarity with low-level Linux performance tuning tools such as
              %a{:href => 'https://perf.wiki.kernel.org/index.php/Tutorial'} perf
              and
              %a{:href => 'https://github.com/iovisor/bpftrace/blob/master/README.md'} bpftrace
              as well as learning to apply PCP tools to analyse complex distributed
              system performance problems.
            %p
              %strong Prerequisite knowledge:
              C programming, Linux experience.
            %p
              %strong Skill level:
              Intermediate-Advanced
            %p
              %strong Primary mentor:
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott &lt;nathans@redhat.com&gt;
              , secondary mentor:
              %a{:href => 'mailto:goodwinos@gmail.com'} Mark Goodwin &lt;goodwinos@gmail.com&gt;
            %p
              %strong Interested students so far:
              2
            %br

    = Haml::Engine.new(File.read("assets/haml-includes/footer.haml")).render
