!!! html
%html
  %head
    = Haml::Engine.new(File.read("assets/haml-includes/head.haml")).render

  %body
    = Haml::Engine.new(File.read("assets/haml-includes/navigation.haml")).render

    %div{:class => 'site-content'}
      %div{:class => 'how-to is-typeset'}

        %div{:class => 'row-parent'}
          %div{:class => 'row'}
            %section{:class => 'row__colspaced'}
              %div{:class => 'colspan12-8 colspan8-5 colspan6-4 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--img'}
                  %br
                  %h3 Ideas List
                  %ol
                    %li
                      Analysis Tools
                      %ul
                        %li
                          %a{:href => '#archives'} Enhancements for PCP archives
                        %li
                          %a{:href => '#collectl'} PCP version of collectl
                        %li
                          %a{:href => '#nmon'} PCP version of nmon
                    %li
                      Integration Projects
                      %ul
                        %li
                          %a{:href => '#statsd'} Using metrics from statsd with PCP
                      %ul
                        %li
                          %a{:href => '#bpftrace'} Using metrics from bpftrace with PCP and Vector
                    %li
                      Web Projects
                      %ul
                        %li
                          %a{:href => '#redis'} Scaling timeseries injest and querying
                        %li
                          %a{:href => '#grafana'} Grafana dashboards for PCP metrics
                  %br

              %div{:class => 'colspan12-4 colspan8-3 colspan6-2 colspan2-2 as-grid with-gutter'}
                %div{:class => 'col__module--cta'}
                  %h2 Google
                  %h2 Summer of Code
                  %h2 2019
                  %br
                    (
                    %a{:href => 'https://summerofcode.withgoogle.com'} Home
                    )
                  %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'archives'}
            %h3 Enhancements for PCP archives
            %p
              One of the key features of PCP is that real-time and historical
              sources of performance metrics are equivalent from the perspective
              of a client application consuming and processing performance data.
              The PCP
              %a{:href => 'https://man7.org/linux/man-pages/man5/LOGARCHIVE.5.html'} archive
              format is the corner-stone of the historical data support.
              This project aims to improve the usefulness and performance of
              PCP archives through a number of independent sub-projects.
              %ul
                %li
                  Over time, we would like to reduce the volume of archived data
                  by increasing the effective sampling interval, e.g. going from
                  sub-minute sampling for the most recent archives to hourly
                  sampling for weekly or monthly archives.
                  This process needs to account for counters that might wrap,
                  counters that might be reset at system or service restarts,
                  small amounts of missing data, etc. while maintaining the
                  semantics of the original data.
                  %a{:href => 'https://man7.org/linux/man-pages/man1/pmlogreduce.1.html'} pmlogreduce
                  already does some of this, but there are a number of issues
                  that can best be addressed by a complete re-implementation.
                %li
                  There is considerable redundancy in the on-disk metadata that
                  could be reduced by a new incremental format for instance
                  domains.
                %li
                  When an archive is opened, not all the metrics are of interest
                  to a particular applications, so run-time efficiency could be
                  enhanced by lazy (just in time) loading of metadata.
              These projects will require the student to gain a deep
              understanding of the PCP archive format created by
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmlogger'} pmlogger
              and to apply basic statistical concepts to the transformation of
              timeseries data.
            %p
              %strong Expected results:
              The student will extend their C language programming skills
              with both green fields and maintenance development within a
              big and mature software project.
              They can also expect to gain deep insight into the semantics
              of performance data stored within a PCP archive.
            %p
              %strong Prerequisite knowledge:
              C programming.
            %p
              %strong Skill level:
              Intermediate-Advanced
            %p
              %strong Mentors:
              %a{:href => 'mailto:kenj@kenj.id.au'} Ken McDonell
              ,
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
            %p
              %strong Interested students so far:
              1
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'collectl'}
            %h3 PCP version of collectl
            %p
              The Performance Co-Pilot provides a cross-platform API for accessing
              live and historical performance data from the local or remote hosts.
              An initial PCP implementation (pcp-collectl) of the
              %a{:href => 'http://collectl.sourceforge.net/'} Collectl
              utility provides some initial support for the same style of reports.
              This project will extend that initial code to complete the reporting
              coverage provided by the initial collectl utility.
              The pcp-collectl utility will be updated to use the more modern
              %a{:href => 'http://man7.org/linux/man-pages/man1/pmrep.1.html'} pmrep
              utility modules under the covers.
              Additionally, the test coverage and documentation will be improved.
            %p
              %strong Expected results:
              The student will extend their Python programming skills,
              and can also expect to gain insight into the meaning of the kernel
              data reported by this tool, and the sampling techniques it uses.
            %p
              %strong Prerequisite knowledge:
              Python programming.
            %p
              %strong Skill level:
              Introductory-Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
              ,
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
            %p
              %strong Interested students so far:
              3
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'nmon'}
            %h3 PCP version of nmon
            %p
              The Performance Co-Pilot provides a cross-platform API for accessing
              live and historical performance data from the local or remote hosts.
              The
              %a{:href => 'http://nmon.sourceforge.net/pmwiki.php'} nmon
              utility provides a curses-based interface for reporting on a variety
              of system and per-process metrics to a console, as well as a CSV
              (Comma Separated Value) output format.
              This project will implement a version of the nmon utility using the
              PCP metrics API (PMAPI), based on the current nmon source code.
              Additionally, regression tests will be implemented and documentation
              will be improved.
            %p
              %strong Expected results:
              The student will extend their C language programming skills,
              and can also expect to gain insight into the meaning of the kernel
              data reported by this tool, and the sampling techniques it uses.
            %p
              %strong Prerequisite knowledge:
              C programming.
            %p
              %strong Skill level:
              Introductory-Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
              ,
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
            %p
              %strong Interested students so far:
              5
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'statsd'}
            %h3 Using metrics from statsd with PCP
            %p
              Performance Co-Pilot is a system performance analysis toolkit which
              currently does not provide an agent for
              %a{:href => 'https://github.com/etsy/statsd'} statsd
              protocol, a text-based UDP protocol for
              %a{:href => 'https://codeascraft.com/2011/02/15/measure-anything-measure-everything/'} performance data
              aggregation.
              The goal is to design and write a PCP agent as a multi-threaded C
              process performing aggregation of statsd packets as pluggable modules
              with two implementations: exact computation and HDR histogram with
              parsing code as pluggable modules: custom parser or ragel-based parser.
              Additionally, regression tests will be implemented and documentation
              provided.
            %p
              %strong Expected results:
              The student will extend their C language programming skills,
              and learn about the inner workings of performance analysis tools
              like PCP and statsd.
            %p
              %strong Prerequisite knowledge:
              C programming.
            %p
              %strong Skill level:
              Introductory-Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:lzap@redhat.com'} Lukas Zapletal
              ,
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
            %p
              %strong Interested students so far:
              3
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'bpftrace'}
            %h3 Using metrics from bpftrace with PCP and Vector
            %p
              %a{:href => 'https://github.com/iovisor/pbftrace'} bpftrace
              is a high-level tracing language for efficient kernel tracing
              using the Linux kernel eBPF (extended Berkeley Packet Filters)
              feature.
              The goal is to design and write a PCP agent which runs arbitrary
              bpftrace scripts and stores the output as PCP metrics, and a new
              %a{:href => 'http://http://getvector.io/'} Vector
              widget which visualizes these collected metrics in a live heat
              map or table.
            %p
              The Vector widget will include a bpftrace query builder for the
              rapid creation of bpftrace scripts.
            %p
              Regression tests will be implemented and documentation
              provided.
            %p
              %strong Expected results:
              The student will extend their C language programming skills,
              and learn about the inner workings of performance analysis tools
              like PCP, Vector and eBPF.
            %p
              %strong Prerequisite knowledge:
              C and Javascript programming.
            %p
              %strong Skill level:
              Advanced
            %p
              %strong Mentors:
              %a{:href => 'mailto:mspiers@netflix.com'} Martin Spiers
              ,
              %a{:href => 'mailto:myllynen@redhat.com'} Marko Myllynen
            %p
              %strong Interested students so far:
              1
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'redis'}
            %h3 Scaling timeseries injest and querying
            %p
              The Performance Co-Pilot approach to scalable, multi-host performance
              analysis builds on the
              %a{:href => 'https://redis.io'} Redis
              distributed data store and its native timeseries support.
              The
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmseries.1.html'} pmseries
              utility and
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmproxy.1.html'} pmproxy
              daemon provide the tooling and APIs to support this.
              This project will explore scalability limits of each these programs,
              with the aim of scaling up PCP timeseries injest and querying to the
              level of many-thousands-of-nodes.
            %p
              %strong Expected results:
              The student will extend their C language programming skills,
              learn about the
              %a{:href => 'https://redis.io'} Redis
              distributed data store (and
              %a{:href => 'https://redis.io/topics/cluster-spec'} Redis clustering
              in particular),
              gain deep familiarity with performance tuning tools such as
              %a{:href => 'https://perf.wiki.kernel.org/index.php/Tutorial'} perf
              as well as learning to apply PCP tools to analyse complex distributed
              system performance problems.
            %p
              %strong Prerequisite knowledge:
              C programming.
            %p
              %strong Skill level:
              Intermediate-Advanced
            %p
              %strong Mentors:
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
              ,
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
            %p
              %strong Interested students so far:
              2
            %br

        %div{:class => 'colspan12-12 colspan8-8 colspan6-6 colspan2-2 as-grid with-gutter'}
          %div{:class => 'col__module--img'}
            %a{:name => 'grafana'}
            %h3 Grafana dashboards for PCP metrics
            %p
              This project will involve developing Grafana
              %a{:href => 'https://grafana.com/dashboards'} dashboards
              and panels for displaying high level performance data across
              the common system level performance analysis domains - CPU,
              memory, network, disk, applications (and many more).
              In Grafana, each high level panel can be linked (via a URL) to
              more detailed performance data, and thus offer an
              intuitive drill-down model for rapidly solving common, yet
              complex, performance issues.
            %p
              The Grafana PCP data source accesses all PCP metric data via
              %a{:href => 'https://redis.io/'} Redis
              and
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmproxy.1.html'} pmproxy
              REST APIs.
              Resulting Grafana charts and panels can be exported in JSON format
              with template variables and included as part of Grafana itself, or
              shipped separately as part of PCP and installed/imported using the
              Grafana provisioning mechanisms.
            %p
              Additionally, the Grafana
              %a{:href => 'https://grafana.com/plugins/grafana-worldmap-panel/installation'} world map
              panel displays time series data or geohash data from a metric
              source overlaid on a world map.
              The PCP 
              %a{:href => 'https://man7.org/linux/man-pages/man1/pmseries.1.html'} pmseries
              tool and APIs can injest and respond to queries about
              performance metrics labeled with geographical location
              information, with the help of the
              %a{:href => 'https://redis.io/commands/geohash'} geohash
              support in the
              %a{:href => 'https://redis.io'} Redis
              distributed data store.
              This project will implement tooling and APIs to interface
              Grafana and Redis for PCP metrics.
            %p
              %strong Expected results:
              The student will extend their C and Javascript programming
              skills, will gain insight into the semantics of various forms of
              performance data available from systems and applications, and
              visualization techniques appropriate to their analysis.
              The student will also learn about the
              %a{:href => 'https://redis.io'} Redis
              distributed data store and geolocation services.
            %p
              %strong Prerequisite knowledge:
              C, Javascript programming.
            %p
              %strong Skill level:
              Intermediate
            %p
              %strong Mentors:
              %a{:href => 'mailto:mgoodwin@redhat.com'} Mark Goodwin
              ,
              %a{:href => 'mailto:nathans@redhat.com'} Nathan Scott
            %p
              %strong Interested students so far:
              6
            %br

    = Haml::Engine.new(File.read("assets/haml-includes/footer.haml")).render
